
	ORG	0
	
	MOV	#Stack,R6

	MOV	#String,-(R6)	; s
	MOV	#Int,-(R6)		; &n
	JSR	R7,str2int_2
	ADD	#4,R6

	HLT


;**********************************************************
; void str2int( int *n, char *s)
;	2(R6) -> n -> R3
;	4(R6) -> s -> R0
;
;**********************************************************
str2int_2:
	MOV	2(R6),R3	; R3 = n
	MOV	4(R6),R0	; R0 = s
	
	MOV	R0,-(R6)	; *n = str2int(s);
	JSR	R7,str2int_1
	ADD	#2,R6

	MOV	R0,(R3)

	RTS	R7


;**********************************************************
; int str2int( char *s)
;	2(R6) -> s -> R1
;
;	int neg -> R5
;	int n   -> R4
;**********************************************************
str2int_1:
	MOV	2(R6),R1	; R1 = s

	CLR	R5			; neg = false;
	
	MOV	-1(R1),R0	; if ( *s == '-' ) {
	AND	#HFF00,R0
	CMP	R0,#'-'
	BNE	EhPositivo

	INC	R5			;	neg = true
	INC	R1			;	++s;
					; }

EhPositivo:
	CLR	R4			; n = 0;

;	2(R6) -> s -> R1
;	int neg -> R5
;	int n   -> R4
Loop:			
	MOV	-1(R1),R0	; while ( *s != ‘\0’ ) {
	AND	#H00FF,R0
	BEQ	LoopOutput
				
	SUB	#'0',R0		;	n = 10 * n + (*s - '0');
	ASL	R4
	MOV	R4,R2
	ASL	R4
	ASL	R4
	ADD	R2,R4
	ADD	R0,R4

	INC	R1			;	++s;

	JMP	Loop		; }

LoopOutput:
	TST	R5			; if (neg) {
	BEQ	ret_str2int_1

	NEG	R4			;	n = - n;
					; }
ret_str2int_1:
	MOV	R4,R0		; return n;
	RTS	R7


String:		DAB	'100',0
Int:		DW	0

; Tamanho do stack de 1024 palavras
			DAW	[1024]
Stack:
